# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/classifier',
                'doc_host': 'https://cah-jake-bergren.github.io',
                'git_url': 'https://github.com/cah-jake-bergren/classifier',
                'lib_path': 'classifier'},
  'syms': { 'classifier.chroma': { 'classifier.chroma.get_or_make_chroma': ('chroma.html#get_or_make_chroma', 'classifier/chroma.py'),
                                   'classifier.chroma.read_json_lines_from_gcs': ( 'chroma.html#read_json_lines_from_gcs',
                                                                                   'classifier/chroma.py')},
            'classifier.evaluate': { 'classifier.evaluate.display_evaluation_row': ( 'evaluate.html#display_evaluation_row',
                                                                                     'classifier/evaluate.py')},
            'classifier.experiments.split_processing': { 'classifier.experiments.split_processing.batch_predict': ( 'experiments/split_processing.html#batch_predict',
                                                                                                                    'classifier/experiments/split_processing.py'),
                                                         'classifier.experiments.split_processing.format_email_for_test_summary': ( 'experiments/split_processing.html#format_email_for_test_summary',
                                                                                                                                    'classifier/experiments/split_processing.py'),
                                                         'classifier.experiments.split_processing.format_email_for_train_summary': ( 'experiments/split_processing.html#format_email_for_train_summary',
                                                                                                                                     'classifier/experiments/split_processing.py'),
                                                         'classifier.experiments.split_processing.make_description_from_row': ( 'experiments/split_processing.html#make_description_from_row',
                                                                                                                                'classifier/experiments/split_processing.py')},
            'classifier.load': { 'classifier.load.Email': ('load.html#email', 'classifier/load.py'),
                                 'classifier.load.Email.to_series': ('load.html#email.to_series', 'classifier/load.py'),
                                 'classifier.load.email_from_row': ('load.html#email_from_row', 'classifier/load.py'),
                                 'classifier.load.email_small_enough': ('load.html#email_small_enough', 'classifier/load.py'),
                                 'classifier.load.get_batches': ('load.html#get_batches', 'classifier/load.py'),
                                 'classifier.load.get_emails_from_frame': ('load.html#get_emails_from_frame', 'classifier/load.py'),
                                 'classifier.load.get_idx': ('load.html#get_idx', 'classifier/load.py'),
                                 'classifier.load.get_possible_labels': ('load.html#get_possible_labels', 'classifier/load.py'),
                                 'classifier.load.get_raw_emails': ('load.html#get_raw_emails', 'classifier/load.py'),
                                 'classifier.load.get_raw_emails_tejas_case_numbers': ( 'load.html#get_raw_emails_tejas_case_numbers',
                                                                                        'classifier/load.py'),
                                 'classifier.load.get_tejas_case_numbers': ('load.html#get_tejas_case_numbers', 'classifier/load.py'),
                                 'classifier.load.get_train_test_idx': ('load.html#get_train_test_idx', 'classifier/load.py'),
                                 'classifier.load.process_raw_emails': ('load.html#process_raw_emails', 'classifier/load.py'),
                                 'classifier.load.write_idx': ('load.html#write_idx', 'classifier/load.py')},
            'classifier.machine_learning': {},
            'classifier.predict': { 'classifier.predict.filter_examples': ('predict.html#filter_examples', 'classifier/predict.py'),
                                    'classifier.predict.format_example': ('predict.html#format_example', 'classifier/predict.py'),
                                    'classifier.predict.get_predictions': ('predict.html#get_predictions', 'classifier/predict.py'),
                                    'classifier.predict.make_prediction_prompt': ( 'predict.html#make_prediction_prompt',
                                                                                   'classifier/predict.py'),
                                    'classifier.predict.predict_batch': ('predict.html#predict_batch', 'classifier/predict.py'),
                                    'classifier.predict.write_predictions': ('predict.html#write_predictions', 'classifier/predict.py')},
            'classifier.process': { 'classifier.process.email_to_document': ('process.html#email_to_document', 'classifier/process.py'),
                                    'classifier.process.get_documents_summaries': ( 'process.html#get_documents_summaries',
                                                                                    'classifier/process.py'),
                                    'classifier.process.get_summaries': ('process.html#get_summaries', 'classifier/process.py'),
                                    'classifier.process.get_summary_chain': ('process.html#get_summary_chain', 'classifier/process.py'),
                                    'classifier.process.load_batch_prediction_results': ( 'process.html#load_batch_prediction_results',
                                                                                          'classifier/process.py'),
                                    'classifier.process.prepare_batch_summarization_files': ( 'process.html#prepare_batch_summarization_files',
                                                                                              'classifier/process.py'),
                                    'classifier.process.prepare_summarization_prompt': ( 'process.html#prepare_summarization_prompt',
                                                                                         'classifier/process.py'),
                                    'classifier.process.summarize_prompts': ('process.html#summarize_prompts', 'classifier/process.py')},
            'classifier.schema': { 'classifier.schema.batch_predict': ('schema.html#batch_predict', 'classifier/schema.py'),
                                   'classifier.schema.get_embedder': ('schema.html#get_embedder', 'classifier/schema.py'),
                                   'classifier.schema.get_model': ('schema.html#get_model', 'classifier/schema.py'),
                                   'classifier.schema.get_storage_client': ('schema.html#get_storage_client', 'classifier/schema.py'),
                                   'classifier.schema.init_vertexai': ('schema.html#init_vertexai', 'classifier/schema.py'),
                                   'classifier.schema.predict': ('schema.html#predict', 'classifier/schema.py'),
                                   'classifier.schema.quota_handler': ('schema.html#quota_handler', 'classifier/schema.py')}}}
