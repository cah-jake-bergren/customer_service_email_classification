# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_chroma.ipynb.

# %% auto 0
__all__ = ['merge_summaries_with_instances', 'get_or_make_chroma']

# %% ../nbs/03_chroma.ipynb 2
from typing import List, Dict
from pathlib import Path
import json
import pandas as pd

from langchain.vectorstores import Chroma
from langchain.embeddings import VertexAIEmbeddings
from langchain.schema import Document
from langchain.document_loaders import DataFrameLoader

from .schema import get_embedder
from .load import get_training_instances, get_idx, TrainingInstance

# %% ../nbs/03_chroma.ipynb 10
def merge_summaries_with_instances(
        summaries: pd.DataFrame, 
        instances: List[TrainingInstance]
        ) -> pd.DataFrame:
    instances_frame = pd.DataFrame([i.to_series() for i in instances])
    return pd.concat(
        [
            summaries,
            instances_frame
        ],
        axis=1).set_index('idx')

# %% ../nbs/03_chroma.ipynb 17
def get_or_make_chroma(
        data_dir: Path, 
        documents: List[Document] = None,
        overwrite: bool = False):
    chroma_dir = data_dir / 'chroma'
    if not chroma_dir.exists():
        chroma_dir.mkdir()
    embedding_function = get_embedder()
    persist_directory = str(chroma_dir.resolve())
    if len(list(chroma_dir.glob("*.sqlite3"))) > 0:
        if not overwrite:
            return Chroma(
                persist_directory=persist_directory,
                embedding_function=embedding_function
            )
        else:
            for f in chroma_dir.glob("*"):
                f.unlink()
    if documents is None:
        raise ValueError("documents cannot be None")
    return Chroma.from_documents(
        documents,
        embedding_function,
        persist_directory=persist_directory
    )
