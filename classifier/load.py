# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_load.ipynb.

# %% auto 0
__all__ = ['label_column', 'get_possible_labels', 'TrainingInstance', 'training_instance_from_row', 'get_training_instances']

# %% ../nbs/01_load.ipynb 2
from typing import Dict, Any, Iterable, List
import pandas as pd

from pydantic import BaseModel
from langchain.schema import Document
from langchain.document_loaders.base import BaseLoader

from .schema import PROJECT_ID, PROJECT_BUCKET

# %% ../nbs/01_load.ipynb 5
label_column = "sfdc_category"

# %% ../nbs/01_load.ipynb 8
def get_possible_labels() -> List[str]:
    return pd.read_excel(
        f"gs://{PROJECT_BUCKET}/Last50KCases_withSubjectAndBody.xlsx"
        ).sfdc_category.unique().tolist()

# %% ../nbs/01_load.ipynb 9
class TrainingInstance(BaseModel):
    idx: int
    label: str
    email_subject: str
    email_body: str
    metadata: Dict[str, Any]


def training_instance_from_row(idx: int, row: pd.Series):
    metadata = row.drop(
        [
            'sfdc_category', 
            'email_subject',
            'email_body'
        ]).to_dict()
    return TrainingInstance(
        idx=idx,
        label=row.sfdc_category,
        email_subject=row.email_subject,
        email_body=row.email_body,
        metadata=metadata
    )

# %% ../nbs/01_load.ipynb 11
def get_training_instances() -> Iterable[TrainingInstance]:
    training_data = pd.read_excel(
        f"gs://{PROJECT_BUCKET}/Last50KCases_withSubjectAndBody.xlsx")
    for idx, row in training_data.iterrows():
        yield training_instance_from_row(idx, row)
