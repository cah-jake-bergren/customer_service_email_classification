# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/experiments/10_10k_retrieval_filtering.ipynb.

# %% auto 0
__all__ = ['EXPERIMENT_PREFIX', 'EXPERIMENT_WRITE_PREFIX', 'TOP_3_PROMPT_TEMPLATE', 'TOP_3_PROMPT', 'PREDICTION_TEMPLATE',
           'PREDICTION_PROMPT', 'get_label_filtered_documents']

# %% ../../nbs/experiments/10_10k_retrieval_filtering.ipynb 2
from typing import Dict, List
from pathlib import Path
import os

import numpy as np
import pandas as pd
from tqdm import tqdm
from sklearn import metrics, model_selection

from langchain.schema import Document
from langchain.prompts import PromptTemplate
from langchain.schema.runnable import RunnableSequence
from langchain.llms import VertexAI
from langchain.vectorstores import Chroma
from langchain.document_loaders import DataFrameLoader
from langchain.output_parsers import CommaSeparatedListOutputParser

from ..schema import WRITE_PREFIX, PROJECT_BUCKET
from ..load import Email, get_batches, get_emails_from_frame, \
    get_raw_emails, email_small_enough
from ..chroma import get_or_make_chroma
from ..predict import write_predictions
from classifier.experiments.split_processing import \
    format_email_for_train_summary, \
    format_email_for_test_summary, \
    make_description_from_row, batch_predict, \
    TRAIN_PROMPT, TEST_PROMPT

# GRPC requires this
os.environ["GRPC_DNS_RESOLVER"] = "native"
EXPERIMENT_PREFIX = "retrieval_filtering"
EXPERIMENT_WRITE_PREFIX = WRITE_PREFIX + "/" + EXPERIMENT_PREFIX

# %% ../../nbs/experiments/10_10k_retrieval_filtering.ipynb 40
TOP_3_PROMPT_TEMPLATE = """Below is a summary of an email sent to our customer service department. 
Here is a list of categories and their descriptions we would like to label this email with. 
Of the options in this list, choose your 3 likeliest labels for the following email. 
Only return the categories you choose as a comma-separated list, not their descriptions (the labels surrounded by '||').
-- CATEGORIES --
{categories}
-- EMAIL --
{email}
-- TOP 3 LIKELIEST LABELS --
"""

TOP_3_PROMPT = PromptTemplate.from_template(TOP_3_PROMPT_TEMPLATE)

# %% ../../nbs/experiments/10_10k_retrieval_filtering.ipynb 46
def get_label_filtered_documents(
        query: str,
        labels: List[str],
        chroma: Chroma,
        k: int = 3
        ) -> Dict[str, List[Document]]:
    documents = {}
    for l in labels:
        label_documents = chroma.similarity_search(
            query,
            filter={'label': l},
            k=k
        )
        documents[l] = label_documents
    return documents

# %% ../../nbs/experiments/10_10k_retrieval_filtering.ipynb 49
PREDICTION_TEMPLATE = """Below is a summary of an email sent to our customer service department.
We believe the email to belong to one of the following categories;
{categories}

Here are some similar examples for each category.
Compare and contract the examples to the email and decide which of the categories it belongs to.
-- EXAMPLES --
{examples}

-- EMAIL --
{email}

-- CATEGORY --
"""

PREDICTION_PROMPT = PromptTemplate.from_template(PREDICTION_TEMPLATE)
